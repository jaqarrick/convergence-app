{"version":3,"sources":["components/welcome/logos/question-logo.svg","components/welcome/logos/MAIN_LOGO.svg","../node_modules/peerjs/dist sync","components/textbanner/TextBanner.tsx","components/info/Info.tsx","components/welcome/Welcome.tsx","components/roomcomponent/RoomComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","TextTicker","direction","scaledFrame","useRef","requestRef","spanRef","useState","_direction","set_Direction","animate","useCallback","current","requestAnimationFrame","console","log","style","transform","useEffect","ref","className","TextBanner","Info","isInfoMenuOpen","setIsInfoMenuOpen","onMouseEnter","onMouseLeave","src","questionLogo","alt","Welcome","updateRoom","allRooms","joinRoom","isListOpen","setIsListOpen","createNewRoom","roomId","uuidv4","MainLogo","onClick","map","roomid","key","RoomComponent","message","match","currentRoom","currentPeer","currentRoomObject","setCurrentPeer","updateSocketPeers","initPeerVideo","stream","peerVideoRef","srcObject","initUserVideo","userVideoRef","peer","setPeer","createPeer","Peer","host","port","path","on","call","navigator","mediaDevices","getUserMedia","audio","video","then","answer","remoteStream","initVideoCall","targetPeerId","params","peerids","peerid","i","autoPlay","to","socket","io","connect","App","history","useHistory","setCurrentRoom","setCurrentRoomObject","setAllRooms","find","rooms","data","setMessage","push","emit","exact","render","props","Boolean","window","location","hostname","ReactDOM","StrictMode","basename","process","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.11ca7cb1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/question-logo.7403ca15.svg\";","module.exports = __webpack_public_path__ + \"static/media/MAIN_LOGO.ee15bd56.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 84;","import React, { useCallback, useState, useRef, useEffect } from \"react\"\nimport \"./TextBanner.css\"\ninterface Props {\n  direction: string\n}\nconst TextBanner: React.FunctionComponent<Props> = ({ direction }) => {\n  return <TextTicker direction={direction} />\n}\n\ninterface TickerProps {\n  direction: string\n}\nconst TextTicker: React.FunctionComponent<TickerProps> = ({ direction }) => {\n  const scaledFrame = useRef<number>(0)\n  const requestRef = useRef<number>(0)\n  const spanRef = useRef<any>()\n  const [_direction, set_Direction] = useState<String>(direction)\n  const animate = useCallback(() => {\n    requestRef.current = requestAnimationFrame(animate)\n    scaledFrame.current = requestRef.current * 2\n    if (_direction === \"right\") {\n      if (scaledFrame.current < 28000) {\n        console.log(scaledFrame.current)\n      } else if (scaledFrame.current >= 28000) {\n        spanRef.current.style.transform = `translateX(0px)`\n      }\n      spanRef.current.style.transform = `translateX(-${scaledFrame.current}px)`\n    } else if (_direction === \"left\") {\n      spanRef.current.style.transform = `translateX(${\n        -90000 + scaledFrame.current\n      }px)`\n    }\n  }, [_direction])\n  useEffect(() => {\n    set_Direction(direction)\n    animate()\n  }, [set_Direction, animate, direction])\n  useEffect(() => console.log(scaledFrame), [scaledFrame])\n\n  return (\n    <div ref={spanRef} className='text-container'>\n      <span>\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise make some noise\n        make some noise make some noise make some noise make some noise make\n        some noise make some noise make some noise make some noise make some\n        noise make some noise make some noise make some noise\n      </span>\n    </div>\n  )\n}\nexport default TextBanner\n","import React, { useState } from \"react\"\nimport \"./Info.css\"\nimport questionLogo from \"../welcome/logos/question-logo.svg\"\n\nconst Info: React.FC = () => {\n  const [isInfoMenuOpen, setIsInfoMenuOpen] = useState<Boolean>(false)\n\n  return (\n    <div className='info-container'>\n      <img\n        onMouseEnter={() => {\n          setIsInfoMenuOpen(true)\n        }}\n        onMouseLeave={() => {\n          setIsInfoMenuOpen(false)\n        }}\n        src={questionLogo}\n        alt='question mark'\n      />\n      <div\n        className={\n          isInfoMenuOpen ? \"info-text-container active\" : \"info-text-container\"\n        }>\n        Convergerge is a virtual space designed for musical collaboration.\n        Customize your performence environment and start creating.\n      </div>\n    </div>\n  )\n}\n\nexport default Info\n","import React, { useEffect, useCallback, useState } from \"react\"\nimport \"./Welcome.css\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport TextBanner from \"../textbanner/TextBanner\"\nimport Info from \"../info/Info\"\nimport MainLogo from \"./logos/MAIN_LOGO.svg\"\ninterface Props {\n  // history: any\n  updateRoom: (roomid: string) => void\n  allRooms: any[]\n  joinRoom: (roomid: string) => void\n}\nconst Welcome: React.FC<Props> = ({\n  // history,\n  updateRoom,\n  allRooms,\n  joinRoom,\n}) => {\n  useEffect(() => console.log(allRooms), [allRooms])\n  const [isListOpen, setIsListOpen] = useState<Boolean>(true)\n  const createNewRoom = useCallback(() => {\n    const roomId = uuidv4()\n    updateRoom(roomId)\n  }, [updateRoom])\n\n  return (\n    <div className='welcome-container'>\n      <div className={\"text-banner-container upper-container\"}>\n        <TextBanner direction={\"left\"} />\n      </div>\n      <div className={\"text-banner-container lower-container\"}>\n        <TextBanner direction={\"right\"} />\n      </div>\n      <Info />\n      <div className='logo-container'>\n        <img src={MainLogo} alt='main logo' />\n      </div>\n\n      <div className='old-welcome'>\n        <button onClick={createNewRoom}> Join New Room </button>\n        <button onClick={() => setIsListOpen(!isListOpen)}>\n          {\" \"}\n          Join Existing Room{\" \"}\n        </button>\n        <div className={isListOpen ? \"room-list active\" : \"room-list\"}>\n          <ul>\n            {allRooms.map(({ roomid }) => (\n              <li\n                onClick={() => {\n                  updateRoom(roomid)\n                }}\n                key={roomid}>\n                {\" \"}\n                {roomid}{\" \"}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Welcome\n","import React, { useCallback, useEffect, useState, useRef } from \"react\"\nimport { RouteChildrenProps, Link } from \"react-router-dom\"\nimport RoomDataObject from \"../../types\"\nimport Peer from \"peerjs\"\n\ninterface RouteProps extends RouteChildrenProps<{ roomid: string }> {}\ninterface PassedProps {\n  message: string\n  currentRoom: string\n  currentPeer: any\n  setCurrentPeer: (peer: string) => void\n  currentRoomObject: RoomDataObject | undefined\n  updateSocketPeers: (roomid: string, peerid: string) => void\n}\nconst RoomComponent: React.FC<RouteProps & PassedProps> = ({\n  message,\n  match,\n  currentRoom,\n  currentPeer,\n  currentRoomObject,\n  setCurrentPeer,\n  updateSocketPeers,\n}) => {\n  useEffect(() => console.log(message, currentRoom), [currentRoom, message])\n  const initPeerVideo = useCallback((stream: MediaStream) => {\n    if (peerVideoRef) {\n      peerVideoRef.current.srcObject = stream\n    }\n  }, [])\n\n  const initUserVideo = useCallback((stream: MediaStream) => {\n    if (userVideoRef) {\n      userVideoRef.current.srcObject = stream\n    }\n  }, [])\n  const [peer, setPeer] = useState<any>()\n  const createPeer = useCallback(() => {\n    const peer = new Peer({\n      host: \"localhost\",\n      port: 9000,\n      path: \"/convergence\",\n    })\n    peer.on(\"open\", id => {\n      setCurrentPeer(id)\n      updateSocketPeers(currentRoom, id)\n      setPeer(peer)\n    })\n\n    peer.on(\"call\", (call: any) => {\n      navigator.mediaDevices\n        .getUserMedia({\n          audio: true,\n          video: true,\n        })\n        .then(stream => {\n          call.answer(stream)\n          call.on(\"stream\", (remoteStream: MediaStream) => {\n            initPeerVideo(remoteStream)\n            initUserVideo(stream)\n          })\n        })\n    })\n  }, [\n    setCurrentPeer,\n    initUserVideo,\n    currentRoom,\n    setPeer,\n    updateSocketPeers,\n    initPeerVideo,\n  ])\n  // const [currentRoom, setCurrentRoom] = useState<any>(null)\n  const initVideoCall = useCallback(\n    (targetPeerId: any) => {\n      if (peer) {\n        navigator.mediaDevices\n          .getUserMedia({ video: true, audio: true })\n          .then(stream => {\n            const call = peer.call(targetPeerId, stream)\n            call.on(\"stream\", (remoteStream: MediaStream) => {\n              initPeerVideo(remoteStream)\n              initUserVideo(stream)\n            })\n          })\n\n        // const getUserMedia = navigator.getUserMedia\n        // getUserMedia(\n        //   { video: true, audio: true },\n        //   (stream: MediaStream) => {\n        //     var call = peer.call(\"another-peers-id\", stream)\n        //     call.on(\"stream\", (remoteStream: MediaStream) => {\n        //       initPeerVideo(remoteStream)\n        //       setStream(stream)\n\n        //       userVideoRef.current.srcObject = stream\n        //     })\n        //   },\n        //   function (err) {\n        //     console.log(\"Failed to get local stream\", err)\n        //   }\n        // )\n      }\n    },\n    [peer, initPeerVideo, initUserVideo]\n  )\n  const peerVideoRef = useRef<any>(null)\n  const userVideoRef = useRef<any>(null)\n\n  return (\n    <div>\n      {\" \"}\n      <button onClick={createPeer}> Create New Peer </button>\n      <p>\n        {\" \"}\n        {currentPeer\n          ? `Your peer id is ${currentPeer}`\n          : `You haven't created a peer id yet`}{\" \"}\n      </p>\n      <h1> {match?.params.roomid} </h1>\n      <p> {message} </p>\n      <div>\n        {\" \"}\n        <ul>\n          {currentRoomObject?.peerids.map((peerid, i) => {\n            if (peerid !== currentPeer)\n              return (\n                <li onClick={() => initVideoCall(peerid)} key={i}>\n                  {\" \"}\n                  <button onClick={() => initVideoCall(peerid)}>\n                    {\" \"}\n                    Call {peerid}{\" \"}\n                  </button>\n                </li>\n              )\n          })}\n        </ul>\n      </div>\n      <div>\n        {\" \"}\n        <video autoPlay ref={userVideoRef}></video>\n        <video autoPlay ref={peerVideoRef}></video>\n      </div>\n      <Link to='/'> Home </Link>\n    </div>\n  )\n}\n\nexport default RoomComponent\n","import React, { useCallback, useEffect, useState } from \"react\"\nimport \"./App.css\"\nimport { Switch, Route, Redirect, useHistory } from \"react-router-dom\"\nimport io from \"socket.io-client\"\nimport Welcome from \"./components/welcome/Welcome\"\nimport RoomComponent from \"./components/roomcomponent/RoomComponent\"\nimport RoomDataObject from \"./types\"\n\nconst socket = io.connect(\"http://localhost:5000\")\n\nfunction App() {\n  let history = useHistory()\n  const [currentRoom, setCurrentRoom] = useState(\"\")\n  const [currentPeer, setCurrentPeer] = useState<any>(null)\n  const [currentRoomObject, setCurrentRoomObject] = useState<RoomDataObject>()\n  const [allRooms, setAllRooms] = useState<any[]>([])\n  useEffect(() => {\n    setCurrentRoomObject(allRooms.find(({ roomid }) => roomid === currentRoom))\n  }, [allRooms, setCurrentRoomObject, currentRoom])\n  useEffect(() => console.log(currentRoomObject), [currentRoomObject])\n  socket.on(\"update room list\", (rooms: RoomDataObject[]) => {\n    setAllRooms(rooms)\n  })\n  socket.on(\"confirm room join\", (data: any) => {\n    const { message, roomid } = data\n    setMessage(message)\n    setCurrentRoom(roomid)\n  })\n  const updateRoom = useCallback(\n    roomid => {\n      history.push(`/rooms/${roomid}`)\n      setCurrentRoom(roomid)\n      socket.emit(\"update room\", roomid)\n    },\n    [setCurrentRoom, history]\n  )\n\n  const updateSocketPeers = useCallback((roomid, peerid) => {\n    socket.emit(\"update peers\", { roomid, peerid })\n  }, [])\n  const [message, setMessage] = useState<string>(\"\")\n  const joinRoom = useCallback(roomid => {\n    socket.emit(\"join room\", roomid)\n    console.log(`You have joined room: ${roomid}`)\n  }, [])\n\n  return (\n    <div className='wrapper'>\n      <Switch>\n        <Route\n          exact\n          path={\"/rooms/:roomid\"}\n          render={props => (\n            <RoomComponent\n              {...props}\n              updateSocketPeers={updateSocketPeers}\n              setCurrentPeer={setCurrentPeer}\n              currentPeer={currentPeer}\n              currentRoom={currentRoom}\n              currentRoomObject={currentRoomObject}\n              message={message}\n            />\n          )}\n        />\n        <Route path='/welcome'>\n          <Welcome\n            allRooms={allRooms}\n            updateRoom={updateRoom}\n            joinRoom={joinRoom}\n          />\n        </Route>\n        <Route exact path='/'>\n          <Redirect to='/welcome' />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { HashRouter as Router } from \"react-router-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL + \"/\"}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}